#!/usr/bin/python3
"""
This is the FileStorage class that
serializes instances to a JSON file
and deserializes JSON file to instances
"""
import json
import datetime

# TODO: manage correctly serialization and deserialization of User
json.JSONEncoder.default = lambda self, obj: (obj.isoformat() if isinstance(obj, datetime.datetime) else obj.__dict__)


class FileStorage:
    def __init__(self):
        self.__file_path = "./file.json"
        self.__objects = {}

    def all(self):
        return self.__objects

    def new(self, obj):
        self.__objects[obj.id] = obj

    def save(self):
        with open(self.__file_path, mode='w', encoding='utf-8') as myFile:
            jsondict = self.__objects
            for k, v in jsondict.items():
                jsondict[k].__dict__.update({'__class__': jsondict[k].__class__.__name__})
            json.dump(jsondict, myFile)

    def reload(self):
                try:
            with open(self.__file_path,
                      mode="r+", encoding="utf-8") as fd:
                self.__objects = {}
                temp = json.load(fd)
                for k in temp.keys():
                    cls = temp[k].pop("__class__", None)
                    cr_at = temp[k]["created_at"]
                    cr_at = datetime.strptime(cr_at, "%Y-%m-%d %H:%M:%S.%f")
                    if "updated_at" in k:
                        up_at = temp[k]["updated_at"]
                        up_at = datetime.strptime(up_at,
                                                  "%Y-%m-%d %H:%M:%S.%f")
                    self.__objects[k] = eval(cls)(**temp[k])
        except Exception as e:
            pass

    def serialize(obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        return obj
